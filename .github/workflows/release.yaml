name: Reusable Release Workflow

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      lambda:
        required: false
        type: boolean
        default: true
        description: "Whether to release with Lambda support."
    secrets:
      RELENG_GITHUB_TOKEN:
        required: true
      APPLE_SIGNING_KEY_P12:
        required: true
      APPLE_SIGNING_KEY_P12_PASSWORD:
        required: true
      AC_PASSWORD:
        required: true
      AC_PROVIDER:
        required: true
      DATADOG_API_KEY:
        required: true

jobs:
  goreleaser:
    runs-on: macos-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          path: _caller
          repository: ${{ github.event.repository.full_name }}
          fetch-depth: 0

      - name: Checkout connector workflows
        uses: actions/checkout@v4
        with:
          path: _workflows
          repository: ConductorOne/github-workflows

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Generate gon and goreleaser configs
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          envsubst < _workflows/.gon-amd64-template.json > _workflows/.gon-amd64.json
          envsubst < _workflows/.gon-arm64-template.json > _workflows/.gon-arm64.json
          envsubst < _workflows/.goreleaser-template.yaml > _workflows/.goreleaser.yaml
          echo "_workflows/.gon-amd64.json:"
          cat _workflows/.gon-amd64.json
          echo "_workflows/.gon-arm64.json:"
          cat _workflows/.gon-arm64.json
          echo "_workflows/.goreleaser.yaml:"
          cat _workflows/.goreleaser.yaml

      - name: Set up Gon
        run: brew tap conductorone/gon && brew install conductorone/gon/gon

      - name: Import Keychain Certs
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_SIGNING_KEY_P12 }}
          p12-password: ${{ secrets.APPLE_SIGNING_KEY_P12_PASSWORD }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          workdir: _caller
          version: "~> v2.5"
          args: release --clean --config ../_workflows/.goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.RELENG_GITHUB_TOKEN }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AC_PROVIDER: ${{ secrets.AC_PROVIDER }}

  goreleaser-docker:
    if: inputs.lambda == true
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: REMOVE AFTER TESTING - Simulate OIDC Role Assumption Error
        run: |
          echo "Error: Could not assume role with OIDC: Not authorized to perform sts:AssumeRoleWithWebIdentity"
          exit 1

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::168442440833:role/GitHubActionsECRPushRole-${{ github.event.repository.name }}"
          aws-region: us-west-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          path: _caller
          repository: ${{ github.event.repository.full_name }}
          fetch-depth: 0

      - name: Checkout connector workflows
        uses: actions/checkout@v4
        with:
          path: _workflows
          repository: ConductorOne/github-workflows

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Generate goreleaser configs
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          envsubst < _workflows/.goreleaser-docker-template.yaml > _workflows/.goreleaser.docker.yaml
          echo "_workflows/.goreleaser.docker.yaml:"
          cat _workflows/.goreleaser.docker.yaml

      - name: Check if ECR images already exist
        id: check-ecr-images
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          # Strip "v" prefix from tag to match GoReleaser version format
          TAG="${{ inputs.tag }}"
          VERSION="${TAG#v}"

          echo "Checking if ECR image ${REPO_NAME}:${VERSION}-arm64 exists"

          # Check if the arm64 image already exists
          if aws ecr describe-images --repository-name "${REPO_NAME}" --image-ids imageTag="${VERSION}-arm64" --region us-west-2 >/dev/null 2>&1; then
            echo "ECR image ${REPO_NAME}:${VERSION}-arm64 already exists"
            echo "images_exist=true" >> $GITHUB_OUTPUT
          else
            echo "ECR image ${REPO_NAME}:${VERSION}-arm64 does not exist"
            echo "images_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Docker Login
        if: steps.check-ecr-images.outputs.images_exist != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.RELENG_GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.check-ecr-images.outputs.images_exist != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Run GoReleaser
        if: steps.check-ecr-images.outputs.images_exist != 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          workdir: _caller
          version: "~> v2.5"
          args: release --clean --config ../_workflows/.goreleaser.docker.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.RELENG_GITHUB_TOKEN }}

      - name: Skip GoReleaser - images already exist
        if: steps.check-ecr-images.outputs.images_exist == 'true'
        run: |
          echo "Skipping GoReleaser because ECR images already exist for tag ${{ inputs.tag }}"

  record-lambda-release:
    if: inputs.lambda == true
    needs: [goreleaser, goreleaser-docker] # lambda releases are dependent on github release assets in the goreleaser job
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::168442440833:role/GitHubActionsECRPushRole-${{ github.event.repository.name }}"
          aws-region: us-west-2
      - name: Invoke Lambda with retries
        run: |
          set +e    # Disable default fail-fast to support retries
          if [[ "$ACTIONS_STEP_DEBUG" == "true" ]]; then
            set -x  # Debug logging
          fi

          TMPFILE=$(mktemp)
          MAX_RETRIES=5
          RETRY_DELAY=10  # seconds

          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Attempt $i to invoke Lambda..."

            RESPONSE=$(aws lambda invoke \
              --function-name "${{ github.event.repository.name }}-releases" \
              --payload "{\"repository\":\"${{ github.event.repository.full_name }}\", \"tag\":\"${{ inputs.tag }}\"}" \
              --cli-binary-format raw-in-base64-out \
              "$TMPFILE" 2>&1)
            EXIT_CODE=$?

            echo "AWS CLI exited with code: $EXIT_CODE"
            cat "$TMPFILE"

            STATUS_CODE=$(jq -r '.statusCode' < "$TMPFILE" 2>/dev/null)

            if [[ $EXIT_CODE -eq 0 && "$STATUS_CODE" == "200" ]]; then
              echo "Lambda invoked successfully."
              break

            elif [[ "$RESPONSE" == *"CodeArtifactUserPendingException"* ]]; then
              echo "Lambda not ready (CodeArtifactUserPendingException)."

              if [[ $i -lt $MAX_RETRIES ]]; then
                WAIT_TIME=$((i * RETRY_DELAY))
                echo "Retrying in $WAIT_TIME seconds..."
                sleep "$WAIT_TIME"
              else
                echo "Lambda still not ready after $MAX_RETRIES attempts."
                rm -f "$TMPFILE"
                exit 1
              fi

            else
              echo "Lambda invoke failed with unexpected error: $RESPONSE"
              rm -f "$TMPFILE"
              exit 1
            fi
          done

          rm -f "$TMPFILE"

  goreleaser-docker-no-lambda:
    if: inputs.lambda == false
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          path: _caller
          repository: ${{ github.event.repository.full_name }}
          fetch-depth: 0

      - name: Checkout connector workflows
        uses: actions/checkout@v4
        with:
          path: _workflows
          repository: ConductorOne/github-workflows

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Generate goreleaser configs
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          envsubst < _workflows/.goreleaser-docker-template-no-lambda.yaml > _workflows/.goreleaser.docker.yaml
          echo "_workflows/.goreleaser.docker.yaml:"
          cat _workflows/.goreleaser.docker.yaml

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.RELENG_GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          workdir: _caller
          version: "~> v2.5"
          args: release --clean --config ../_workflows/.goreleaser.docker.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.RELENG_GITHUB_TOKEN }}

  notify-release-failure:
    needs:
      [
        goreleaser,
        goreleaser-docker,
        goreleaser-docker-no-lambda,
        record-lambda-release,
      ]
    if: failure()
    permissions:
      checks: read
      actions: read
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Collect failure annotations
        id: collect-ann
        continue-on-error: true # never block the Datadog notification
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail

          # Get the latest attempt number for this workflow run
          run_json="$(gh api "repos/$REPO/actions/runs/$RUN_ID")"
          attempt="$(echo "$run_json" | jq -r '.run_attempt')"

          # List jobs for the *specific* attempt (prevents mixing earlier attempts)
          jobs_json="$(gh api "repos/$REPO/actions/runs/$RUN_ID/attempts/$attempt/jobs?per_page=100" --paginate)"

          # Filter to failed jobs in this attempt
          failed_jobs=$(echo "$jobs_json" | jq -r '.jobs[] | select(.conclusion=="failure") | @base64')

          out=""
          if [ -z "$failed_jobs" ]; then
            out="No failure annotations found for latest attempt (#${attempt})."
          else
            while IFS= read -r enc; do
              j() { echo "$enc" | base64 -d | jq -r "$1"; }
              name="$(j '.name')"
              check_run_url="$(j '.check_run_url')"

              # Resolve check run ID for this attempt and fetch its annotations
              check_id="$(gh api "$check_run_url" -H "Accept: application/vnd.github+json" | jq -r '.id')"

              anns="$(gh api "repos/$REPO/check-runs/$check_id/annotations?per_page=100" \
                      --paginate -H "Accept: application/vnd.github+json" | \
                      jq -r '.[] | select(.annotation_level=="failure") | .message' || true)"

              if [ -n "$anns" ]; then
                while IFS= read -r msg; do
                  oneline="$(printf "%s" "$msg" | tr '\n' ' ' | sed 's/  \+/ /g')"
                  out+="$name: $oneline"$'\n'
                done <<< "$anns"
              else
                out+="$name: (no failure-level annotations; step may have failed before annotating)"$'\n'
              fi
            done <<< "$failed_jobs"
          fi

          # Keep Datadog payload compact (~4k limit on text)
          out="$(printf "%s" "$out" | tail -c 3500)"

          {
            echo "annotations<<EOF"
            printf '%s\n' "$out"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Send Datadog event on failure
        uses: masci/datadog@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          api-url: https://us3.datadoghq.com/
          events: |
            - title: "Baton Connector Release Failed"
              text: |
                %%%
                # ${{ github.event.repository.name }}:${{ inputs.tag }} Release Failed
                [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

                ## Error
                ```${{ steps.collect-ann.outputs.annotations }}```

                ## Details
                * **Repository:** `${{ github.event.repository.full_name }}`
                * **Release Tag:** `${{ inputs.tag }}`
                * **Workflow:** `baton-connector-release`
                * **Action Run ID:** `${{ github.run_id }}`
                %%%
              alert_type: "error"
              host: ${{ github.repository_owner }}
              tags:
                - "github_repository:${{ github.event.repository.full_name }}"
                - "github_release_tag:${{ inputs.tag }}"
                - "github_workflow:baton-connector-release"
